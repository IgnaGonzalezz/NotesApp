{"ast":null,"code":"const API_BASE = \"http://localhost:8080\"; // puerto donde corre tu backend\n\n// Obtener todas las notas\nexport async function getNotes() {\n  const res = await fetch(`${API_BASE}/notes`);\n  if (!res.ok) throw new Error(\"Failed to fetch notes\");\n  return await res.json();\n}\n\n// Archivar / desarchivar nota\nexport async function toggleArchive(id) {\n  const res = await fetch(`${API_BASE}/notes/${id}/archive`, {\n    method: \"PATCH\"\n  });\n  if (!res.ok) throw new Error(\"Failed to toggle archive\");\n  return await res.json();\n}\n\n// Borrar nota\nexport async function deleteNote(id) {\n  const res = await fetch(`${API_BASE}/notes/${id}`, {\n    method: \"DELETE\"\n  });\n  if (!res.ok) throw new Error(\"Failed to delete note\");\n  return true;\n}\n\n// Crear nueva nota\nexport async function createNote(note) {\n  const res = await fetch(`${API_BASE}/notes`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(note)\n  });\n  if (!res.ok) throw new Error(\"Failed to create note\");\n  return await res.json();\n}","map":{"version":3,"names":["API_BASE","getNotes","res","fetch","ok","Error","json","toggleArchive","id","method","deleteNote","createNote","note","headers","body","JSON","stringify"],"sources":["/home/ignacio/Escritorio/mi-ejercicio/frontend/src/services/api.js"],"sourcesContent":["const API_BASE = \"http://localhost:8080\"; // puerto donde corre tu backend\n\n// Obtener todas las notas\nexport async function getNotes() {\n  const res = await fetch(`${API_BASE}/notes`);\n  if (!res.ok) throw new Error(\"Failed to fetch notes\");\n  return await res.json();\n}\n\n// Archivar / desarchivar nota\nexport async function toggleArchive(id) {\n  const res = await fetch(`${API_BASE}/notes/${id}/archive`, {\n    method: \"PATCH\",\n  });\n  if (!res.ok) throw new Error(\"Failed to toggle archive\");\n  return await res.json();\n}\n\n// Borrar nota\nexport async function deleteNote(id) {\n  const res = await fetch(`${API_BASE}/notes/${id}`, {\n    method: \"DELETE\",\n  });\n  if (!res.ok) throw new Error(\"Failed to delete note\");\n  return true;\n}\n\n// Crear nueva nota\nexport async function createNote(note) {\n  const res = await fetch(`${API_BASE}/notes`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(note),\n  });\n  if (!res.ok) throw new Error(\"Failed to create note\");\n  return await res.json();\n}\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB,CAAC,CAAC;;AAE1C;AACA,OAAO,eAAeC,QAAQA,CAAA,EAAG;EAC/B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,QAAQ,CAAC;EAC5C,IAAI,CAACE,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACrD,OAAO,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC;AACzB;;AAEA;AACA,OAAO,eAAeC,aAAaA,CAACC,EAAE,EAAE;EACtC,MAAMN,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,UAAUQ,EAAE,UAAU,EAAE;IACzDC,MAAM,EAAE;EACV,CAAC,CAAC;EACF,IAAI,CAACP,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EACxD,OAAO,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC;AACzB;;AAEA;AACA,OAAO,eAAeI,UAAUA,CAACF,EAAE,EAAE;EACnC,MAAMN,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,UAAUQ,EAAE,EAAE,EAAE;IACjDC,MAAM,EAAE;EACV,CAAC,CAAC;EACF,IAAI,CAACP,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACrD,OAAO,IAAI;AACb;;AAEA;AACA,OAAO,eAAeM,UAAUA,CAACC,IAAI,EAAE;EACrC,MAAMV,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,QAAQ,EAAE;IAC3CS,MAAM,EAAE,MAAM;IACdI,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI;EAC3B,CAAC,CAAC;EACF,IAAI,CAACV,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACrD,OAAO,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}