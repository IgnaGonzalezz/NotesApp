{"ast":null,"code":"const API_BASE = \"http://localhost:8080\";\n\n// Notas\nexport async function getNotes() {\n  const res = await fetch(`${API_BASE}/notes`);\n  if (!res.ok) throw new Error(\"Failed to get notes\");\n  return res.json();\n}\nexport async function getNotesByCategory(categoryId) {\n  const res = await fetch(`${API_BASE}/categories/${categoryId}/notes`);\n  if (!res.ok) throw new Error(\"Failed to get notes by category\");\n  return res.json();\n}\nexport async function getArchivedNotes() {\n  const res = await fetch(`${API_BASE}/notes/archived`);\n  if (!res.ok) throw new Error(\"Failed to get archived notes\");\n  return res.json();\n}\nexport async function createNote(payload) {\n  const res = await fetch(`${API_BASE}/notes`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  if (!res.ok) throw new Error(\"Failed to create note\");\n  return res.json();\n}\nexport async function updateNote(id, payload) {\n  const res = await fetch(`${API_BASE}/notes/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  if (!res.ok) throw new Error(\"Failed to update note\");\n  return res.json();\n}\nexport async function deleteNote(id) {\n  const res = await fetch(`${API_BASE}/notes/${id}`, {\n    method: \"DELETE\"\n  });\n  if (!res.ok) throw new Error(\"Failed to delete note\");\n  return res.json();\n}\nexport async function toggleArchive(id) {\n  // Si tu endpoint usa PATCH como comentamos, usamos PATCH\n  const res = await fetch(`${API_BASE}/notes/${id}/archive`, {\n    method: \"PATCH\"\n  });\n  if (!res.ok) throw new Error(\"Failed to switch archived state\");\n  return res.json();\n}\nexport async function assignCategory(noteId, categoryId) {\n  const res = await fetch(`${API_BASE}/notes/${noteId}/category/${categoryId}`, {\n    method: \"PUT\"\n  });\n  if (!res.ok) throw new Error(\"Failed to assign category\");\n  return res.json();\n}\nexport async function removeCategory(noteId, categoryId) {\n  const res = await fetch(`${API_BASE}/notes/${noteId}/category/${categoryId}`, {\n    method: \"DELETE\"\n  });\n  if (!res.ok) throw new Error(\"Failed to remove category\");\n  return res.json();\n}\n\n// Categorías\nexport async function getCategories() {\n  const res = await fetch(`${API_BASE}/categories`);\n  if (!res.ok) throw new Error(\"Failed to get categories\");\n  return res.json();\n}\nexport async function createCategory(payload) {\n  const res = await fetch(`${API_BASE}/categories`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  if (!res.ok) throw new Error(\"Failed to create category\");\n  return res.json();\n}\nexport async function deleteCategory(id) {\n  const res = await fetch(`${API_BASE}/categories/${id}`, {\n    method: \"DELETE\"\n  });\n  if (!res.ok) throw new Error(\"Failed to delete category\");\n  return res.json();\n}","map":{"version":3,"names":["API_BASE","getNotes","res","fetch","ok","Error","json","getNotesByCategory","categoryId","getArchivedNotes","createNote","payload","method","headers","body","JSON","stringify","updateNote","id","deleteNote","toggleArchive","assignCategory","noteId","removeCategory","getCategories","createCategory","deleteCategory"],"sources":["/home/ignacio/Escritorio/mi-ejercicio/frontend/src/services/api.js"],"sourcesContent":["const API_BASE = \"http://localhost:8080\";\n\n// Notas\nexport async function getNotes() {\n  const res = await fetch(`${API_BASE}/notes`);\n  if (!res.ok) throw new Error(\"Failed to get notes\");\n  return res.json();\n}\n\nexport async function getNotesByCategory(categoryId) {\n  const res = await fetch(`${API_BASE}/categories/${categoryId}/notes`);\n  if (!res.ok) throw new Error(\"Failed to get notes by category\");\n  return res.json();\n}\n\nexport async function getArchivedNotes() {\n  const res = await fetch(`${API_BASE}/notes/archived`);\n  if (!res.ok) throw new Error(\"Failed to get archived notes\");\n  return res.json();\n}\n\nexport async function createNote(payload) {\n  const res = await fetch(`${API_BASE}/notes`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(payload),\n  });\n  if (!res.ok) throw new Error(\"Failed to create note\");\n  return res.json();\n}\n\nexport async function updateNote(id, payload) {\n  const res = await fetch(`${API_BASE}/notes/${id}`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(payload),\n  });\n  if (!res.ok) throw new Error(\"Failed to update note\");\n  return res.json();\n}\n\nexport async function deleteNote(id) {\n  const res = await fetch(`${API_BASE}/notes/${id}`, { method: \"DELETE\" });\n  if (!res.ok) throw new Error(\"Failed to delete note\");\n  return res.json();\n}\n\nexport async function toggleArchive(id) {\n  // Si tu endpoint usa PATCH como comentamos, usamos PATCH\n  const res = await fetch(`${API_BASE}/notes/${id}/archive`, { method: \"PATCH\" });\n  if (!res.ok) throw new Error(\"Failed to switch archived state\");\n  return res.json();\n}\n\nexport async function assignCategory(noteId, categoryId) {\n  const res = await fetch(`${API_BASE}/notes/${noteId}/category/${categoryId}`, {\n    method: \"PUT\",\n  });\n  if (!res.ok) throw new Error(\"Failed to assign category\");\n  return res.json();\n}\n\nexport async function removeCategory(noteId, categoryId) {\n  const res = await fetch(`${API_BASE}/notes/${noteId}/category/${categoryId}`, {\n    method: \"DELETE\",\n  });\n  if (!res.ok) throw new Error(\"Failed to remove category\");\n  return res.json();\n}\n\n// Categorías\nexport async function getCategories() {\n  const res = await fetch(`${API_BASE}/categories`);\n  if (!res.ok) throw new Error(\"Failed to get categories\");\n  return res.json();\n}\n\nexport async function createCategory(payload) {\n  const res = await fetch(`${API_BASE}/categories`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(payload),\n  });\n  if (!res.ok) throw new Error(\"Failed to create category\");\n  return res.json();\n}\n\nexport async function deleteCategory(id) {\n  const res = await fetch(`${API_BASE}/categories/${id}`, { method: \"DELETE\" });\n  if (!res.ok) throw new Error(\"Failed to delete category\");\n  return res.json();\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}